<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LimitsMiddleware</name>
    </assembly>
    <members>
        <member name="T:LimitsMiddleware.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.Logging.ILog.Log(LimitsMiddleware.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:LimitsMiddleware.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:LimitsMiddleware.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:LimitsMiddleware.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:LimitsMiddleware.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:LimitsMiddleware.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:LimitsMiddleware.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:LimitsMiddleware.Logging.ILog"/> objects.
            </summary>
        </member>
        <member name="F:LimitsMiddleware.Logging.LogProvider.DisableLoggingEnvironmentVariable">
            <summary>
            The disable logging environment variable. If the environment variable is set to 'true', then logging
            will be disabled.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProvider.SetCurrentLogProvider(LimitsMiddleware.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:LimitsMiddleware.Logging.ILog"/></returns>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:LimitsMiddleware.Logging.ILog"/></returns>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:LimitsMiddleware.Logging.ILog"/></returns>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:LimitsMiddleware.Logging.ILog"/></returns>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="P:LimitsMiddleware.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LimitsMiddleware.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:LimitsMiddleware.Logging.LogProvider.SetCurrentLogProvider(LimitsMiddleware.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="P:LimitsMiddleware.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LimitsMiddleware.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="M:LimitsMiddleware.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curlybraces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.CookieOptions">
            <summary>
            Options used to create a new cookie.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.CookieOptions.#ctor">
            <summary>
            Creates a default cookie with a path of '/'.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.CookieOptions.Domain">
            <summary>
            Gets or sets the domain to associate the cookie with.
            </summary>
            <returns>The domain to associate the cookie with.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.CookieOptions.Path">
            <summary>
            Gets or sets the cookie path.
            </summary>
            <returns>The cookie path.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.CookieOptions.Expires">
            <summary>
            Gets or sets the expiration date and time for the cookie.
            </summary>
            <returns>The expiration date and time for the cookie.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.CookieOptions.Secure">
            <summary>
            Gets or sets a value that indicates whether to transmit the cookie using Secure Sockets Layer (SSL)ï¿½that is, over HTTPS only.
            </summary>
            <returns>true to transmit the cookie only over an SSL connection (HTTPS); otherwise, false.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.CookieOptions.HttpOnly">
            <summary>
            Gets or sets a value that indicates whether a cookie is accessible by client-side script.
            </summary>
            <returns>true if a cookie is accessible by client-side script; otherwise, false.</returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.FormCollection">
            <summary>
            Contains the parsed form values.
            </summary>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.ReadableStringCollection">
            <summary>
            Accessors for query, forms, etc.
            </summary>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.IReadableStringCollection">
            <summary>
            Accessors for headers, query, forms, etc.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IReadableStringCollection.Get(System.String)">
            <summary>
            Get the associated value from the collection.  Multiple values will be merged.
            Returns null if the key is not present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IReadableStringCollection.GetValues(System.String)">
            <summary>
            Get the associated values from the collection in their original format.
            Returns null if the key is not present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IReadableStringCollection.Item(System.String)">
            <summary>
            Get the associated value from the collection.  Multiple values will be merged.
            Returns null if the key is not present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ReadableStringCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            Create a new wrapper
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ReadableStringCollection.Get(System.String)">
            <summary>
            Get the associated value from the collection.  Multiple values will be merged.
            Returns null if the key is not present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ReadableStringCollection.GetValues(System.String)">
            <summary>
            Get the associated values from the collection in their original format.
            Returns null if the key is not present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ReadableStringCollection.GetEnumerator">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ReadableStringCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.ReadableStringCollection.Item(System.String)">
            <summary>
            Get the associated value from the collection.  Multiple values will be merged.
            Returns null if the key is not present.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.IFormCollection">
            <summary>
            Contains the parsed form values.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.FormCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Owin.FormCollection" /> class.
            </summary>
            <param name="store">The store for the form.</param>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.HeaderDictionary">
            <summary>
            Represents a wrapper for owin.RequestHeaders and owin.ResponseHeaders.
            </summary>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.IHeaderDictionary">
            <summary>
            Represents a wrapper for owin.RequestHeaders and owin.ResponseHeaders.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IHeaderDictionary.GetCommaSeparatedValues(System.String)">
            <summary>
            Get the associated values from the collection separated into individual values.
            Quoted values will not be split, and the quotes will be removed.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated values from the collection separated into individual values, or null if the key is not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IHeaderDictionary.Append(System.String,System.String)">
            <summary>
            Add a new value. Appends to the header if already present
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IHeaderDictionary.AppendValues(System.String,System.String[])">
            <summary>
            Add new values. Each item remains a separate array entry.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IHeaderDictionary.AppendCommaSeparatedValues(System.String,System.String[])">
            <summary>
            Quotes any values containing comas, and then coma joins all of the values with any existing values.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IHeaderDictionary.Set(System.String,System.String)">
            <summary>
            Sets a specific header value.
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IHeaderDictionary.SetValues(System.String,System.String[])">
            <summary>
            Sets the specified header values without modification.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IHeaderDictionary.SetCommaSeparatedValues(System.String,System.String[])">
            <summary>
            Quotes any values containing comas, and then coma joins all of the values.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IHeaderDictionary.Item(System.String)">
            <summary>
            Get or sets the associated value from the collection as a single string.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated value from the collection as a single string or null if the key is not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Owin.HeaderDictionary" /> class.
            </summary>
            <param name="store">The underlying data store.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Get(System.String)">
            <summary>
            Get the associated value from the collection as a single string.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated value from the collection as a single string or null if the key is not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.GetValues(System.String)">
            <summary>
            Get the associated values from the collection without modification.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated value from the collection without modification, or null if the key is not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.GetCommaSeparatedValues(System.String)">
            <summary>
            Get the associated values from the collection separated into individual values.
            Quoted values will not be split, and the quotes will be removed.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated values from the collection separated into individual values, or null if the key is not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Append(System.String,System.String)">
            <summary>
            Add a new value. Appends to the header if already present
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.AppendValues(System.String,System.String[])">
            <summary>
            Add new values. Each item remains a separate array entry.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.AppendCommaSeparatedValues(System.String,System.String[])">
            <summary>
            Quotes any values containing comas, and then coma joins all of the values with any existing values.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Set(System.String,System.String)">
            <summary>
            Sets a specific header value.
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.SetValues(System.String,System.String[])">
            <summary>
            Sets the specified header values without modification.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.SetCommaSeparatedValues(System.String,System.String[])">
            <summary>
            Quotes any values containing comas, and then coma joins all of the values.
            </summary>
            <param name="key">The header name.</param>
            <param name="values">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Add(System.String,System.String[])">
            <summary>
            Adds the given header and values to the collection.
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The header values.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Microsoft.Owin.HeaderDictionary" /> contains a specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>true if the <see cref="T:Microsoft.Owin.HeaderDictionary" /> contains a specific key; otherwise, false.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Remove(System.String)">
            <summary>
            Removes the given header from the collection.
            </summary>
            <param name="key">The header name.</param>
            <returns>true if the specified object was removed from the collection; otherwise, false.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.TryGetValue(System.String,System.String[]@)">
            <summary>
            Retrieves a value from the dictionary.
            </summary>
            <param name="key">The header name.</param>
            <param name="value">The value.</param>
            <returns>true if the <see cref="T:Microsoft.Owin.HeaderDictionary" /> contains the key; otherwise, false.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String[]})">
            <summary>
            Adds a new list of items to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Clear">
            <summary>
            Clears the entire list of objects.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String[]})">
            <summary>
            Returns a value indicating whether the specified object occurs within this collection.
            </summary>
            <param name="item">The item.</param>
            <returns>true if the specified object occurs within this collection; otherwise, false.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String[]}[],System.Int32)">
            <summary>
            Copies the <see cref="T:Microsoft.Owin.HeaderDictionary" /> elements to a one-dimensional Array instance at the specified index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the specified objects copied from the <see cref="T:Microsoft.Owin.HeaderDictionary" />.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HeaderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String[]})">
            <summary>
            Removes the given item from the the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>true if the specified object was removed from the collection; otherwise, false.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.HeaderDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:Microsoft.Owin.HeaderDictionary" />;.
            </summary>
            <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:Microsoft.Owin.HeaderDictionary" />.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.HeaderDictionary.Values">
             <summary>
            
             </summary>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.HeaderDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.Owin.HeaderDictionary" />;.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Microsoft.Owin.HeaderDictionary" />.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.HeaderDictionary.IsReadOnly">
            <summary>
            Gets a value that indicates whether the <see cref="T:Microsoft.Owin.HeaderDictionary" /> is in read-only mode.
            </summary>
            <returns>true if the <see cref="T:Microsoft.Owin.HeaderDictionary" /> is in read-only mode; otherwise, false.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.HeaderDictionary.Item(System.String)">
            <summary>
            Get or sets the associated value from the collection as a single string.
            </summary>
            <param name="key">The header name.</param>
            <returns>the associated value from the collection as a single string or null if the key is not present.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.HeaderDictionary.System#Collections#Generic#IDictionary{System#String@System#String[]}#Item(System.String)">
            <summary>
            Throws KeyNotFoundException if the key is not present.
            </summary>
            <param name="key">The header name.</param>
            <returns></returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.HostString">
            <summary>
            Represents the host portion of a Uri can be used to construct Uri's properly formatted and encoded for use in
            HTTP headers.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.#ctor(System.String)">
            <summary>
            Creates a new HostString without modification. The value should be Unicode rather than punycode, and may have a port.
            IPv4 and IPv6 addresses are also allowed, and also may have ports.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.ToString">
            <summary>
            Returns the value as normalized by ToUriComponent().
            </summary>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.ToUriComponent">
            <summary>
            Returns the value properly formatted and encoded for use in a URI in a HTTP header.
            Any Unicode is converted to punycode. IPv6 addresses will have brackets added if they are missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.FromUriComponent(System.String)">
            <summary>
            Creates a new HostString from the given uri component.
            Any punycode will be converted to Unicode.
            </summary>
            <param name="uriComponent"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.FromUriComponent(System.Uri)">
            <summary>
            Creates a new HostString from the host and port of the give Uri instance.
            Punycode will be converted to Unicode.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.Equals(LimitsMiddleware.LibOwin.HostString)">
            <summary>
            Compares the equality of the Value property, ignoring case.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.Equals(System.Object)">
            <summary>
            Compares against the given object only if it is a HostString.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.GetHashCode">
            <summary>
            Gets a hash code for the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.op_Equality(LimitsMiddleware.LibOwin.HostString,LimitsMiddleware.LibOwin.HostString)">
            <summary>
            Compares the two instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.HostString.op_Inequality(LimitsMiddleware.LibOwin.HostString,LimitsMiddleware.LibOwin.HostString)">
            <summary>
            Compares the two instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.HostString.Value">
            <summary>
            Returns the original value from the constructor.
            </summary>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.IOwinContext">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinContext.Get``1(System.String)">
            <summary>
            Gets a value from the OWIN environment, or returns default(T) if not present.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value with the specified key or the default(T) if not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinContext.Set``1(System.String,``0)">
            <summary>
            Sets the given key and value in the OWIN environment.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinContext.Request">
            <summary>
            Gets a wrapper exposing request specific properties.
            </summary>
            <returns>A wrapper exposing request specific properties.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinContext.Response">
            <summary>
            Gets a wrapper exposing response specific properties.
            </summary>
            <returns>A wrapper exposing response specific properties.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinContext.Environment">
            <summary>
            Gets the OWIN environment.
            </summary>
            <returns>The OWIN environment.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinContext.TraceOutput">
            <summary>
            Gets or sets the host.TraceOutput environment value.
            </summary>
            <returns>The host.TraceOutput TextWriter.</returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.IOwinRequest">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinRequest.ReadFormAsync">
            <summary>
            Asynchronously reads and parses the request body as a form.
            </summary>
            <returns>The parsed form data.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinRequest.Get``1(System.String)">
            <summary>
            Gets a value from the OWIN environment, or returns default(T) if not present.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value with the specified key or the default(T) if not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinRequest.Set``1(System.String,``0)">
            <summary>
            Sets the given key and value in the OWIN environment.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Environment">
            <summary>
            Gets the OWIN environment.
            </summary>
            <returns>The OWIN environment.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Context">
            <summary>
            Gets the request context.
            </summary>
            <returns>The request context.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Method">
            <summary>
            Gets or set the HTTP method.
            </summary>
            <returns>The HTTP method.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Scheme">
            <summary>
            Gets or set the HTTP request scheme from owin.RequestScheme.
            </summary>
            <returns>The HTTP request scheme from owin.RequestScheme.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.IsSecure">
            <summary>
            Returns true if the owin.RequestScheme is https.
            </summary>
            <returns>true if this request is using https; otherwise, false.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Host">
            <summary>
            Gets or set the Host header. May include the port.
            </summary>
            <return>The Host header.</return>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.PathBase">
            <summary>
            Gets or set the owin.RequestPathBase.
            </summary>
            <returns>The owin.RequestPathBase.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Path">
            <summary>
            Gets or set the request path from owin.RequestPath.
            </summary>
            <returns>The request path from owin.RequestPath.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.QueryString">
            <summary>
            Gets or set the query string from owin.RequestQueryString.
            </summary>
            <returns>The query string from owin.RequestQueryString.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Query">
            <summary>
            Gets the query value collection parsed from owin.RequestQueryString.
            </summary>
            <returns>The query value collection parsed from owin.RequestQueryString.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Uri">
            <summary>
            Gets the uniform resource identifier (URI) associated with the request.
            </summary>
            <returns>The uniform resource identifier (URI) associated with the request.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Protocol">
            <summary>
            Gets or set the owin.RequestProtocol.
            </summary>
            <returns>The owin.RequestProtocol.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Headers">
            <summary>
            Gets the request headers.
            </summary>
            <returns>The request headers.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Cookies">
            <summary>
            Gets the collection of Cookies for this request.
            </summary>
            <returns>The collection of Cookies for this request.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.ContentType">
            <summary>
            Gets or sets the Content-Type header.
            </summary>
            <returns>The Content-Type header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.CacheControl">
            <summary>
            Gets or sets the Cache-Control header.
            </summary>
            <returns>The Cache-Control header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.MediaType">
            <summary>
            Gets or sets the Media-Type header.
            </summary>
            <returns>The Media-Type header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Accept">
            <summary>
            Gets or set the Accept header.
            </summary>
            <returns>The Accept header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.Body">
            <summary>
            Gets or set the owin.RequestBody Stream.
            </summary>
            <returns>The owin.RequestBody Stream.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.CallCancelled">
            <summary>
            Gets or sets the cancellation token for the request.
            </summary>
            <returns>The cancellation token for the request.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.LocalIpAddress">
            <summary>
            Gets or set the server.LocalIpAddress.
            </summary>
            <returns>The server.LocalIpAddress.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.LocalPort">
            <summary>
            Gets or set the server.LocalPort.
            </summary>
            <returns>The server.LocalPort.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.RemoteIpAddress">
            <summary>
            Gets or set the server.RemoteIpAddress.
            </summary>
            <returns>The server.RemoteIpAddress.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.RemotePort">
            <summary>
            Gets or set the server.RemotePort.
            </summary>
            <returns>The server.RemotePort.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinRequest.User">
            <summary>
            Gets or set the owin.RequestUser (or gets server.User for non-standard implementations).
            </summary>
            <returns>The server.User.</returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.IOwinResponse">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.OnSendingHeaders(System.Action{System.Object},System.Object)">
            <summary>
            Registers for an event that fires when the response headers are sent.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="state">The callback state.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.Redirect(System.String)">
            <summary>
            Sets a 302 response status code and the Location header.
            </summary>
            <param name="location">The location where to redirect the client.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.Write(System.String)">
            <summary>
            Writes the given text to the response body stream using UTF-8.
            </summary>
            <param name="text">The response data.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.Write(System.Byte[])">
            <summary>
            Writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <param name="offset">The zero-based byte offset in the <paramref name="data" /> parameter at which to begin copying bytes.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.WriteAsync(System.String)">
            <summary>
            Asynchronously writes the given text to the response body stream using UTF-8.
            </summary>
            <param name="text">The response data.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.WriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given text to the response body stream using UTF-8.
            </summary>
            <param name="text">The response data.</param>
            <param name="token">A token used to indicate cancellation.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.WriteAsync(System.Byte[])">
            <summary>
            Asynchronously writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.WriteAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <param name="token">A token used to indicate cancellation.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <param name="offset">The zero-based byte offset in the <paramref name="data" /> parameter at which to begin copying bytes.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="token">A token used to indicate cancellation.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.Get``1(System.String)">
            <summary>
            Gets a value from the OWIN environment, or returns default(T) if not present.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value with the specified key or the default(T) if not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponse.Set``1(System.String,``0)">
            <summary>
            Sets the given key and value in the OWIN environment.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.Environment">
            <summary>
            Gets the OWIN environment.
            </summary>
            <returns>The OWIN environment.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.Context">
            <summary>
            Gets the request context.
            </summary>
            <returns>The request context.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.StatusCode">
            <summary>
            Gets or sets the optional owin.ResponseStatusCode.
            </summary>
            <returns>The optional owin.ResponseStatusCode, or 200 if not set.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.ReasonPhrase">
            <summary>
            Gets or sets the the optional owin.ResponseReasonPhrase.
            </summary>
            <returns>The the optional owin.ResponseReasonPhrase.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.Protocol">
            <summary>
            Gets or sets the owin.ResponseProtocol.
            </summary>
            <returns>The owin.ResponseProtocol.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.Headers">
            <summary>
            Gets the response header collection.
            </summary>
            <returns>The response header collection.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.Cookies">
            <summary>
            Gets a collection used to manipulate the Set-Cookie header.
            </summary>
            <returns>A collection used to manipulate the Set-Cookie header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.ContentLength">
            <summary>
            Gets or sets the Content-Length header.
            </summary>
            <returns>The Content-Length header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.ContentType">
            <summary>
            Gets or sets the Content-Type header.
            </summary>
            <returns>The Content-Type header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.Expires">
            <summary>
            Gets or sets the Expires header.
            </summary>
            <returns>The Expires header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.ETag">
            <summary>
            Gets or sets the E-Tag header.
            </summary>
            <returns>The E-Tag header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.IOwinResponse.Body">
            <summary>
            Gets or sets the owin.ResponseBody Stream.
            </summary>
            <returns>The owin.ResponseBody Stream.</returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.OwinContext">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinContext.#ctor">
            <summary>
            Create a new context with only request and response header collections.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new wrapper.
            </summary>
            <param name="environment">OWIN environment dictionary which stores state information about the request, response and relevant server state.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinContext.Get``1(System.String)">
            <summary>
            Gets a value from the OWIN environment, or returns default(T) if not present.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value with the specified key or the default(T) if not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinContext.Set``1(System.String,``0)">
            <summary>
            Sets the given key and value in the OWIN environment.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinContext.Request">
            <summary>
            Gets a wrapper exposing request specific properties.
            </summary>
            <returns>A wrapper exposing request specific properties.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinContext.Response">
            <summary>
            Gets a wrapper exposing response specific properties.
            </summary>
            <returns>A wrapper exposing response specific properties.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinContext.Environment">
            <summary>
            Gets the OWIN environment.
            </summary>
            <returns>The OWIN environment.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinContext.TraceOutput">
            <summary>
            Gets or sets the host.TraceOutput environment value.
            </summary>
            <returns>The host.TraceOutput TextWriter.</returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.OwinRequest">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinRequest.#ctor">
            <summary>
            Create a new context with only request and response header collections.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinRequest.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new environment wrapper exposing request properties.
            </summary>
            <param name="environment">OWIN environment dictionary which stores state information about the request, response and relevant server state.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinRequest.ReadFormAsync">
            <summary>
            Asynchronously reads and parses the request body as a form.
            </summary>
            <returns>The parsed form data.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinRequest.Get``1(System.String)">
            <summary>
            Gets a value from the OWIN environment, or returns default(T) if not present.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value with the specified key or the default(T) if not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinRequest.Set``1(System.String,``0)">
            <summary>
            Sets the given key and value in the OWIN environment.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Environment">
            <summary>
            Gets the OWIN environment.
            </summary>
            <returns>The OWIN environment.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Context">
            <summary>
            Gets the request context.
            </summary>
            <returns>The request context.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Method">
            <summary>
            Gets or set the HTTP method.
            </summary>
            <returns>The HTTP method.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Scheme">
            <summary>
            Gets or set the HTTP request scheme from owin.RequestScheme.
            </summary>
            <returns>The HTTP request scheme from owin.RequestScheme.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.IsSecure">
            <summary>
            Returns true if the owin.RequestScheme is https.
            </summary>
            <returns>true if this request is using https; otherwise, false.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Host">
            <summary>
            Gets or set the Host header. May include the port.
            </summary>
            <return>The Host header.</return>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.PathBase">
            <summary>
            Gets or set the owin.RequestPathBase.
            </summary>
            <returns>The owin.RequestPathBase.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Path">
            <summary>
            Gets or set the request path from owin.RequestPath.
            </summary>
            <returns>The request path from owin.RequestPath.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.QueryString">
            <summary>
            Gets or set the query string from owin.RequestQueryString.
            </summary>
            <returns>The query string from owin.RequestQueryString.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Query">
            <summary>
            Gets the query value collection parsed from owin.RequestQueryString.
            </summary>
            <returns>The query value collection parsed from owin.RequestQueryString.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Uri">
            <summary>
            Gets the uniform resource identifier (URI) associated with the request.
            </summary>
            <returns>The uniform resource identifier (URI) associated with the request.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Protocol">
            <summary>
            Gets or set the owin.RequestProtocol.
            </summary>
            <returns>The owin.RequestProtocol.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Headers">
            <summary>
            Gets the request headers.
            </summary>
            <returns>The request headers.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Cookies">
            <summary>
            Gets the collection of Cookies for this request.
            </summary>
            <returns>The collection of Cookies for this request.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.ContentType">
            <summary>
            Gets or sets the Content-Type header.
            </summary>
            <returns>The Content-Type header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.CacheControl">
            <summary>
            Gets or sets the Cache-Control header.
            </summary>
            <returns>The Cache-Control header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.MediaType">
            <summary>
            Gets or sets the Media-Type header.
            </summary>
            <returns>The Media-Type header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Accept">
            <summary>
            Gets or set the Accept header.
            </summary>
            <returns>The Accept header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.Body">
            <summary>
            Gets or set the owin.RequestBody Stream.
            </summary>
            <returns>The owin.RequestBody Stream.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.CallCancelled">
            <summary>
            Gets or sets the cancellation token for the request.
            </summary>
            <returns>The cancellation token for the request.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.LocalIpAddress">
            <summary>
            Gets or set the server.LocalIpAddress.
            </summary>
            <returns>The server.LocalIpAddress.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.LocalPort">
            <summary>
            Gets or set the server.LocalPort.
            </summary>
            <returns>The server.LocalPort.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.RemoteIpAddress">
            <summary>
            Gets or set the server.RemoteIpAddress.
            </summary>
            <returns>The server.RemoteIpAddress.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.RemotePort">
            <summary>
            Gets or set the server.RemotePort.
            </summary>
            <returns>The server.RemotePort.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinRequest.User">
            <summary>
            Gets or set the owin.RequestUser (or gets server.User for non-standard implementations).
            </summary>
            <returns>The server.User.</returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.OwinResponse">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.#ctor">
            <summary>
            Create a new context with only request and response header collections.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new environment wrapper exposing response properties.
            </summary>
            <param name="environment">OWIN environment dictionary which stores state information about the request, response and relevant server state.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.OnSendingHeaders(System.Action{System.Object},System.Object)">
            <summary>
            Registers for an event that fires when the response headers are sent.
            </summary>
            <param name="callback">The callback method.</param>
            <param name="state">The callback state.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.Redirect(System.String)">
            <summary>
            Sets a 302 response status code and the Location header.
            </summary>
            <param name="location">The location where to redirect the client.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.Write(System.String)">
            <summary>
            Writes the given text to the response body stream using UTF-8.
            </summary>
            <param name="text">The response data.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.Write(System.Byte[])">
            <summary>
            Writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <param name="offset">The zero-based byte offset in the <paramref name="data" /> parameter at which to begin copying bytes.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.WriteAsync(System.String)">
            <summary>
            Asynchronously writes the given text to the response body stream using UTF-8.
            </summary>
            <param name="text">The response data.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.WriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given text to the response body stream using UTF-8.
            </summary>
            <param name="text">The response data.</param>
            <param name="token">A token used to indicate cancellation.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.WriteAsync(System.Byte[])">
            <summary>
            Asynchronously writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.WriteAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <param name="token">A token used to indicate cancellation.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given bytes to the response body stream.
            </summary>
            <param name="data">The response data.</param>
            <param name="offset">The zero-based byte offset in the <paramref name="data" /> parameter at which to begin copying bytes.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="token">A token used to indicate cancellation.</param>
            <returns>A Task tracking the state of the write operation.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.Get``1(System.String)">
            <summary>
            Gets a value from the OWIN environment, or returns default(T) if not present.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value with the specified key or the default(T) if not present.</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.OwinResponse.Set``1(System.String,``0)">
            <summary>
            Sets the given key and value in the OWIN environment.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the value to set.</param>
            <param name="value">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.Environment">
            <summary>
            Gets the OWIN environment.
            </summary>
            <returns>The OWIN environment.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.Context">
            <summary>
            Gets the request context.
            </summary>
            <returns>The request context.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.StatusCode">
            <summary>
            Gets or sets the optional owin.ResponseStatusCode.
            </summary>
            <returns>The optional owin.ResponseStatusCode, or 200 if not set.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.ReasonPhrase">
            <summary>
            Gets or sets the the optional owin.ResponseReasonPhrase.
            </summary>
            <returns>The the optional owin.ResponseReasonPhrase.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.Protocol">
            <summary>
            Gets or sets the owin.ResponseProtocol.
            </summary>
            <returns>The owin.ResponseProtocol.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.Headers">
            <summary>
            Gets the response header collection.
            </summary>
            <returns>The response header collection.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.Cookies">
            <summary>
            Gets a collection used to manipulate the Set-Cookie header.
            </summary>
            <returns>A collection used to manipulate the Set-Cookie header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.ContentLength">
            <summary>
            Gets or sets the Content-Length header.
            </summary>
            <returns>The Content-Length header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.ContentType">
            <summary>
            Gets or sets the Content-Type header.
            </summary>
            <returns>The Content-Type header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.Expires">
            <summary>
            Gets or sets the Expires header.
            </summary>
            <returns>The Expires header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.ETag">
            <summary>
            Gets or sets the E-Tag header.
            </summary>
            <returns>The E-Tag header.</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.OwinResponse.Body">
            <summary>
            Gets or sets the owin.ResponseBody Stream.
            </summary>
            <returns>The owin.ResponseBody Stream.</returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.PathString">
            <summary>
            Provides correct escaping for Path and PathBase values when needed to reconstruct a request or redirect URI string
            </summary>
        </member>
        <member name="F:LimitsMiddleware.LibOwin.PathString.Empty">
            <summary>
            Represents the empty path. This field is read-only.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.#ctor(System.String)">
            <summary>
            Initialize the path string with a given value. This value must be in un-escaped format. Use
            PathString.FromUriComponent(value) if you have a path value which is in an escaped format.
            </summary>
            <param name="value">The unescaped path to be assigned to the Value property.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.ToString">
            <summary>
            Provides the path string escaped in a way which is correct for combining into the URI representation.
            </summary>
            <returns>The escaped path value</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.ToUriComponent">
            <summary>
            Provides the path string escaped in a way which is correct for combining into the URI representation.
            </summary>
            <returns>The escaped path value</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.FromUriComponent(System.String)">
            <summary>
            Returns an PathString given the path as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a path.
            </summary>
            <param name="uriComponent">The escaped path as it appears in the URI format.</param>
            <returns>The resulting PathString</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.FromUriComponent(System.Uri)">
            <summary>
            Returns an PathString given the path as from a Uri object. Relative Uri objects are not supported.
            </summary>
            <param name="uri">The Uri object</param>
            <returns>The resulting PathString</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.StartsWithSegments(LimitsMiddleware.LibOwin.PathString)">
            <summary>
            Checks if this instance starts with or exactly matches the other instance. Only full segments are matched.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.StartsWithSegments(LimitsMiddleware.LibOwin.PathString,LimitsMiddleware.LibOwin.PathString@)">
            <summary>
            Checks if this instance starts with or exactly matches the other instance. Only full segments are matched.
            </summary>
            <param name="other"></param>
            <param name="remaining">Any remaining segments from this instance not included in the other instance.</param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.Add(LimitsMiddleware.LibOwin.PathString)">
            <summary>
            Adds two PathString instances into a combined PathString value.
            </summary>
            <returns>The combined PathString value</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.Add(LimitsMiddleware.LibOwin.QueryString)">
            <summary>
            Combines a PathString and QueryString into the joined URI formatted string value.
            </summary>
            <returns>The joined URI formatted string value</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.Equals(LimitsMiddleware.LibOwin.PathString)">
            <summary>
            Compares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.
            </summary>
            <param name="other">The second PathString for comparison.</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.Equals(LimitsMiddleware.LibOwin.PathString,System.StringComparison)">
            <summary>
            Compares this PathString value to another value using a specific StringComparison type
            </summary>
            <param name="other">The second PathString for comparison</param>
            <param name="comparisonType">The StringComparison type to use</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.Equals(System.Object)">
            <summary>
            Compares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.
            </summary>
            <param name="obj">The second PathString for comparison.</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.GetHashCode">
            <summary>
            Returns the hash code for the PathString value. The hash code is provided by the OrdinalIgnoreCase implementation.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.op_Equality(LimitsMiddleware.LibOwin.PathString,LimitsMiddleware.LibOwin.PathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>True if both PathString values are equal</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.op_Inequality(LimitsMiddleware.LibOwin.PathString,LimitsMiddleware.LibOwin.PathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>True if both PathString values are not equal</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.op_Addition(LimitsMiddleware.LibOwin.PathString,LimitsMiddleware.LibOwin.PathString)">
            <summary>
            Operator call through to Add
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The PathString combination of both values</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.PathString.op_Addition(LimitsMiddleware.LibOwin.PathString,LimitsMiddleware.LibOwin.QueryString)">
            <summary>
            Operator call through to Add
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The PathString combination of both values</returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.PathString.Value">
            <summary>
            The unescaped path value
            </summary>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.PathString.HasValue">
            <summary>
            True if the path is not empty
            </summary>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.QueryString">
            <summary>
            Provides correct handling for QueryString value when needed to reconstruct a request or redirect URI string
            </summary>
        </member>
        <member name="F:LimitsMiddleware.LibOwin.QueryString.Empty">
            <summary>
            Represents the empty query string. This field is read-only.
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.#ctor(System.String)">
            <summary>
            Initalize the query string with a given value. This value must be in escaped and delimited format without
            a leading '?' character.
            </summary>
            <param name="value">The query string to be assigned to the Value property.</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.#ctor(System.String,System.String)">
            <summary>
            Initialize a query string with a single given parameter name and value. The value is
            </summary>
            <param name="name">The unencoded parameter name</param>
            <param name="value">The unencoded parameter value</param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.ToString">
            <summary>
            Provides the query string escaped in a way which is correct for combining into the URI representation.
            A leading '?' character will be prepended unless the Value is null or empty. Characters which are potentally
            dangerous are escaped.
            </summary>
            <returns>The query string value</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.ToUriComponent">
            <summary>
            Provides the query string escaped in a way which is correct for combining into the URI representation.
            A leading '?' character will be prepended unless the Value is null or empty. Characters which are potentially
            dangerous are escaped.
            </summary>
            <returns>The query string value</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.FromUriComponent(System.String)">
            <summary>
            Returns an QueryString given the query as it is escaped in the URI format. The string MUST NOT contain any
            value that is not a query.
            </summary>
            <param name="uriComponent">The escaped query as it appears in the URI format.</param>
            <returns>The resulting QueryString</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.FromUriComponent(System.Uri)">
            <summary>
            Returns an QueryString given the query as from a Uri object. Relative Uri objects are not supported.
            </summary>
            <param name="uri">The Uri object</param>
            <returns>The resulting QueryString</returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.Equals(LimitsMiddleware.LibOwin.QueryString)">
            <summary>
            Indicates whether the current instance is equal to the other instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.Equals(System.Object)">
            <summary>
            Indicates whether the current instance is equal to the other instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.op_Equality(LimitsMiddleware.LibOwin.QueryString,LimitsMiddleware.LibOwin.QueryString)">
            <summary>
            Compares the two instances for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.QueryString.op_Inequality(LimitsMiddleware.LibOwin.QueryString,LimitsMiddleware.LibOwin.QueryString)">
            <summary>
            Compares the two instances for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.QueryString.Value">
            <summary>
            The unescaped query string without the leading '?' character
            </summary>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.QueryString.HasValue">
            <summary>
            True if the query string is not empty
            </summary>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.RequestCookieCollection">
            <summary>
            A wrapper for the request Cookie header
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.RequestCookieCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a new wrapper
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.RequestCookieCollection.GetEnumerator">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.RequestCookieCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:LimitsMiddleware.LibOwin.RequestCookieCollection.Item(System.String)">
            <summary>
            Returns null rather than throwing KeyNotFoundException
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:LimitsMiddleware.LibOwin.ResponseCookieCollection">
            <summary>
            A wrapper for the response Set-Cookie header
            </summary>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ResponseCookieCollection.#ctor(LimitsMiddleware.LibOwin.IHeaderDictionary)">
            <summary>
            Create a new wrapper
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ResponseCookieCollection.Append(System.String,System.String)">
            <summary>
            Add a new cookie and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ResponseCookieCollection.Append(System.String,System.String,LimitsMiddleware.LibOwin.CookieOptions)">
            <summary>
            Add a new cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ResponseCookieCollection.Delete(System.String)">
            <summary>
            Sets an expired cookie
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.ResponseCookieCollection.Delete(System.String,LimitsMiddleware.LibOwin.CookieOptions)">
            <summary>
            Sets an expired cookie
            </summary>
            <param name="key"></param>
            <param name="options"></param>
        </member>
        <member name="M:LimitsMiddleware.LibOwin.IOwinResponseExtension.OnSendingHeaders``1(LimitsMiddleware.LibOwin.IOwinResponse,System.Action{``0},``0)">
            <summary>
            Registers for an event that fires when the response headers are sent.
            </summary>
            <param name="response">The owin response</param>
            <param name="callback">The callback method.</param>
            <param name="state">The callback state.</param>
        </member>
        <member name="T:LimitsMiddleware.InterlockedBoolean">
            <summary>
            Interlocked support for boolean values
            </summary>
        </member>
        <member name="M:LimitsMiddleware.InterlockedBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:InterlockedBoolean"/>
            </summary>
            <param name="initialValue">initial value</param>
        </member>
        <member name="M:LimitsMiddleware.InterlockedBoolean.Set(System.Boolean)">
            <summary>
            Sets a new value
            </summary>
            <param name="newValue">new value</param>
            <returns>the original value before any operation was performed</returns>
        </member>
        <member name="M:LimitsMiddleware.InterlockedBoolean.CompareExchange(System.Boolean,System.Boolean)">
            <summary>
            Compares the current value and the comparand for equality and, if they are equal, 
            replaces the current value with the new value in an atomic/thread-safe operation.
            </summary>
            <param name="newValue">new value</param>
            <param name="comparand">value to compare the current value with</param>
            <returns>the original value before any operation was performed</returns>
        </member>
        <member name="P:LimitsMiddleware.InterlockedBoolean.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="M:LimitsMiddleware.Limits.MinResponseDelay(System.Int32)">
            <summary>
            Adds a minimum delay before sending the response.
            </summary>
            <param name="minDelay">The min response delay, in milliseconds.</param>
            <returns>A midfunc.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MinResponseDelay(System.Func{System.Int32})">
            <summary>
            Adds a minimum delay before sending the response.
            </summary>
            <param name="getMinDelay">A delegate to return the min response delay.</param>
            <returns>The OWIN builder instance.</returns>
            <exception cref="T:System.ArgumentNullException">getMinDelay</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MinResponseDelay(System.Func{LimitsMiddleware.RequestContext,System.Int32})">
            <summary>
            Adds a minimum delay before sending the response.
            </summary>
            <param name="getMinDelay">A delegate to return the min response delay.</param>
            <returns>The OWIN builder instance.</returns>
            <exception cref="T:System.ArgumentNullException">getMinDelay</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MinResponseDelay(System.TimeSpan)">
            <summary>
            Adds a minimum delay before sending the response.
            </summary>
            <param name="minDelay">The min response delay.</param>
            <returns>A midfunc.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MinResponseDelay(System.Func{System.TimeSpan})">
            <summary>
            Adds a minimum delay before sending the response.
            </summary>
            <param name="getMinDelay">A delegate to return the min response delay.</param>
            <returns>The OWIN builder instance.</returns>
            <exception cref="T:System.ArgumentNullException">getMinDelay</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MinResponseDelay(System.Func{LimitsMiddleware.RequestContext,System.TimeSpan})">
            <summary>
            Adds a minimum delay before sending the response.
            </summary>
            <param name="getMinDelay">A delegate to return the min response delay.</param>
            <returns>The OWIN builder instance.</returns>
            <exception cref="T:System.ArgumentNullException">getMinDelay</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxUrlLength(System.Int32)">
            <summary>
            Limits the length of the URL.
            </summary>
            <param name="maxUrlLength">Maximum length of the URL.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxUrlLength(System.Func{System.Int32})">
            <summary>
            Limits the length of the URL.
            </summary>
            <param name="getMaxUrlLength">Maximum length of the URL.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxUrlLength(System.Func{LimitsMiddleware.RequestContext,System.Int32})">
            <summary>
            Limits the length of the URL.
            </summary>
            <param name="getMaxUrlLength">A delegate to get the maximum URL length.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxUrlLength</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxRequestContentLength(System.Int32)">
            <summary>
            Limits the length of the request content.
            </summary>
            <param name="maxContentLength">Maximum length of the content.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxRequestContentLength(System.Func{System.Int32})">
            <summary>
            Limits the length of the request content.
            </summary>
            <param name="getMaxContentLength">A delegate to get the maximum content length.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxContentLength</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxRequestContentLength(System.Func{LimitsMiddleware.RequestContext,System.Int32})">
            <summary>
            Limits the length of the request content.
            </summary>
            <param name="getMaxContentLength">A delegate to get the maximum content length.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxContentLength</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxQueryStringLength(System.Int32)">
            <summary>
            Limits the length of the query string.
            </summary>
            <param name="maxQueryStringLength">Maximum length of the query string.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxQueryStringLength(System.Func{System.Int32})">
            <summary>
            Limits the length of the query string.
            </summary>
            <param name="getMaxQueryStringLength">A delegate to get the maximum query string length.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxQueryStringLength(System.Func{LimitsMiddleware.RequestContext,System.Int32})">
            <summary>
            Limits the length of the query string.
            </summary>
            <param name="getMaxQueryStringLength">A delegate to get the maximum query string length.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxQueryStringLength</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.ConnectionTimeout(System.TimeSpan)">
            <summary>
            Timeouts the connection if there hasn't been an read activity on the request body stream or any
            write activity on the response body stream.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.ConnectionTimeout(System.Func{System.TimeSpan})">
            <summary>
            Timeouts the connection if there hasn't been an read activity on the request body stream or any
            write activity on the response body stream.
            </summary>
            <param name="getTimeout">A delegate to retrieve the timeout timespan. Allows you
            to supply different values at runtime.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getTimeout</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.ConnectionTimeout(System.Func{LimitsMiddleware.RequestContext,System.TimeSpan})">
            <summary>
            Timeouts the connection if there hasn't been an read activity on the request body stream or any
            write activity on the response body stream.
            </summary>
            <param name="getTimeout">A delegate to retrieve the timeout timespan. Allows you
            to supply different values at runtime.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getTimeout</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxConcurrentRequests(System.Int32)">
            <summary>
            Limits the number of concurrent requests that can be handled used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="maxConcurrentRequests">The maximum number of concurrent requests. Use 0 or a negative
            number to specify unlimited number of concurrent requests.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxConcurrentRequests(System.Func{System.Int32})">
            <summary>
            Limits the number of concurrent requests that can be handled used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="getMaxConcurrentRequests">A delegate to retrieve the maximum number of concurrent requests. Allows you
            to supply different values at runtime. Use 0 or a negative number to specify unlimited number of concurrent requests.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxConcurrentRequests</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxConcurrentRequests(System.Func{LimitsMiddleware.RequestContext,System.Int32})">
            <summary>
            Limits the number of concurrent requests that can be handled used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="getMaxConcurrentRequests">A delegate to retrieve the maximum number of concurrent requests. Allows you
            to supply different values at runtime. Use 0 or a negative number to specify unlimited number of concurrent requests.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxConcurrentRequests</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxBandwidthPerRequest(System.Int32)">
            <summary>
            Limits the bandwith used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="maxBytesPerSecond">The maximum number of bytes per second to be transferred. Use 0 or a negative
            number to specify infinite bandwidth.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxBandwidthPerRequest(System.Func{System.Int32})">
            <summary>
            Limits the bandwith used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="getMaxBytesPerSecond">A delegate to retrieve the maximum number of bytes per second to be transferred.
            Allows you to supply different values at runtime. Use 0 or a negative number to specify infinite bandwidth.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxBytesPerSecond</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxBandwidthPerRequest(System.Func{LimitsMiddleware.RequestContext,System.Int32})">
            <summary>
            Limits the bandwith used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="getMaxBytesPerSecond">A delegate to retrieve the maximum number of bytes per second to be transferred.
            Allows you to supply different values at runtime. Use 0 or a negative number to specify infinite bandwidth.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxBytesPerSecond</exception>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxBandwidthGlobal(System.Int32)">
            <summary>
            Limits the bandwith used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="maxBytesPerSecond">The maximum number of bytes per second to be transferred. Use 0 or a negative
            number to specify infinite bandwidth.</param>
            <returns>An OWIN middleware delegate.</returns>
        </member>
        <member name="M:LimitsMiddleware.Limits.MaxBandwidthGlobal(System.Func{System.Int32})">
            <summary>
            Limits the bandwith used by the subsequent stages in the owin pipeline.
            </summary>
            <param name="getBytesPerSecond">A delegate to retrieve the maximum number of bytes per second to be transferred.
            Allows you to supply different values at runtime. Use 0 or a negative number to specify infinite bandwidth.</param>
            <returns>An OWIN middleware delegate.</returns>
            <exception cref="T:System.ArgumentNullException">getMaxBytesToWrite</exception>
        </member>
        <member name="T:LimitsMiddleware.Properties.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:LimitsMiddleware.Properties.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:LimitsMiddleware.Properties.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:LimitsMiddleware.Properties.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:LimitsMiddleware.Properties.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:LimitsMiddleware.Properties.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:LimitsMiddleware.Properties.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:LimitsMiddleware.Properties.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:LimitsMiddleware.Properties.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:LimitsMiddleware.Properties.MeansImplicitUseAttribute"/>
            or <see cref="T:LimitsMiddleware.Properties.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:LimitsMiddleware.Properties.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:LimitsMiddleware.Properties.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.Properties.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:LimitsMiddleware.Properties.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:LimitsMiddleware.RequestContext">
            <summary>
            Context of the request.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.Method">
            <summary>
            The Http Method
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.Uri">
            <summary>
            The <see cref="P:LimitsMiddleware.RequestContext.Uri"/> of the request.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.Headers">
            <summary>
            The request headers.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.Host">
            <summary>
            The Host header. May include the port.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.LocalIpAddress">
            <summary>
            The local IP Address the request was received on.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.LocalPort">
            <summary>
            The port the request was received on.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.RemoteIpAddress">
            <summary>
            The IP Address of the remote client.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.RemotePort">
            <summary>
            The port of the remote client.
            </summary>
        </member>
        <member name="P:LimitsMiddleware.RequestContext.User">
            <summary>
            The owin.RequestUser (or gets server.User for non-standard implementations).
            </summary>
        </member>
    </members>
</doc>
